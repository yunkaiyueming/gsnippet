package main

//Go 数组是值类型，赋值和函数传参操作都会复制整个数组数据
//传数组的指针就不会复制数组数据，都指向同一个数组地址，达到共享内存的目的
//切片是引用传递，所以它们不需要使用额外的内存并且比使用数组更有效率

//切片本身是一个只读对象，其工作机制类似数组指针的一种封装

type slice struct {
	array unsafe.Pointer
	len   int
	cap   int
}

[]int{1,2,3,4,5}

var slice []int
nil 切片的指针指向 nil，一个不存在的切片的时候，就需要用到 nil 切片。比如函数在发生异常的时候，返回的切片就是 nil 切片

空切片 ： 空切片一般会用来表示一个空的集合
slice := make([]int, 0)
slice := []int{}

空切片和 nil 切片的区别在于，空切片指向的地址不是nil，指向的是一个内存地址，但是它没有分配任何内存空间，即底层元素包含0个元素


字面量创建切片的时候，cap 的值一定要保持清醒，避免共享原数组导致的 bug

切片是一种引用类型。（与字典map、通道channel一样，都是引用类型）

切片的底层数据结构和实现
切片的扩容策略append
切片的拷贝


切片的常用操作：
赋值，读取[m:n]，复制copySlice，追加append，循环


